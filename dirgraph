#!/bin/sh

# [IOS] Project 1 - Directory Contents Report
# Author: Jiri Furda (xfurda00)


# --- Shell settings ---
LC_ALL=en_US.UTF-8
POSIXLY_CORRECT=yes


# --- Variables ---
HELP=0
N=0


# --- Processing flags ---
while getopts :i:n o
do	case "$o" in
		i) FILE_ERE="$OPTARG";;
		n) N=1;;
		*) HELP=1;;
	esac
done


# --- Processing target directory ---
ARGC=$#
if [ "$ARGC" -eq 0 ]; then
	DIR=.
else
	if [ "$OPTIND" -eq "$ARGC" ]; then
		shift $(($OPTIND - 1))	
		DIR="$*"
	else
		if [ $(($OPTIND - 1)) -eq "$ARGC" ]; then
			DIR=.
		else
			HELP=1
		fi
	fi
fi


# --- Returning help ---
if [ "$HELP" -eq 1 ]; then
	echo "This script creates report of directory" >&2
	echo "Syntax: dirgraph [-i FILE_ERE] [-n] [DIR]" >&2
	exit 1 # jedna nebo nula?
fi


# --- Check for errors ---
if [ ! -d "$DIR" ]; then
	echo "Error: Directory doesn't exist" >&2
	exit 1
fi


# --- Normalization (-n FLAG) ---
if [ "$N" -eq 1 ]; then
	if [ -t 1 ]; then
		N=$(tput cols) # Proc se to musi takhle?
	else
		N=80
	fi
fi


# --- Printing head of result ---
echo "Root directory: $DIR"
printf "Directories: %d\n" $(find $DIR -type d | awk -v ignore="$FILE_ERE" '
{
	# --- Ignore flag (-i) ---
	if(ignore != "")
	{
		split($0,path,"/")
		for(i in path)
		{
			if(match(path[i],ignore) != 0)
				next;
		}
	}
	print $0;
}
' | wc -l)


# --- File size histogram ---
find "$DIR" -type f -exec wc -c {} + | awk -v ignore="$FILE_ERE" -v maxcol="$N" '
BEGIN{
	totalfiles = 0;
}
{
	if($2 != "total")
	{
		filesize = $1;
		if(ignore != "")
		{
			$1 = "";
			split($0,path,"/") # prvni bude asi s mezerou
			for(i in path)
			{
				if(match(path[i],ignore) != 0)
					next;
			}
		}

		if(filesize < 100)
			size[0]++;
		else if(filesize < 1024)
			size[1]++;
		else if(filesize < 10240)
			size[2]++;
		else if(filesize < 102400)
			size[3]++;
		else if(filesize < 1048576)
			size[4]++;
		else if(filesize < 10485760)
			size[5]++;
		else if(filesize < 104857600)
			size[6]++;
		else if(filesize < 1073741824)
			size[7]++;
		else
			size[8]++;

		totalfiles++;
	}
}
END{
	print "All files: "totalfiles;

	prefix[0] = "<100 B";
	prefix[1] = "<1 KiB";
	prefix[2] = "<10 KiB";
	prefix[3] = "<100 KiB";
	prefix[4] = "<1 MiB";
	prefix[5] = "<10 MiB";
	prefix[6] = "<100 MiB";
	prefix[7] = "<1 GiB";
	prefix[8] = ">=1 GiB";

	if(maxcol != 0)
	{
		maxhashcol = maxcol-13; # Asi osetrit
        	for(i = 0; i < 9; i++)
        	{ 
                	if(size[i] > maxsize)
                        	maxsize	= size[i];
        	}

	}

	print "File size histogram:"
	for(i = 0; i < 9; i++)
	{
		if(maxcol == 0 || maxsize <= maxhashcol)
			max = size[i];
		else
			max = size[i] * maxhashcol / maxsize;

		printf "  %-8s: ",prefix[i];

		for (j = 0; j < max; j++)
		{
			printf "#";
		}
		printf "\n";
	}
}'

# --- File type histogram ---
find "$DIR" -type f -exec file -F "//" {} \; | awk -F"// " -v ignore="$FILE_ERE" '
{
	# --- Ignore flag (-i) ---
	if(ignore != "")
	{
		split($1,path,"/")
		for(i in path)
		{
			if(match(path[i],ignore) != 0)
				next;
		}
	}
	
	# --- Shortening file info ---
	if(length($2) > 40)
	$2 = substr($2, 0, 40)"...";
	
	print $2;
}' | sort | uniq -c | sort -n -r | head -n 10 | awk -v maxcol="$N" '
BEGIN{		
	if(maxcol != 0)
		maxhashcol = maxcol-48; # Asi osetrit
	
	print "File type histogram:"	
}
{ 
	if(NR==1)
		maxtype = $1;
	if(maxcol == 0 || maxtype <= maxhashcol)
		max = $1;
	else
		max = $1 * maxhashcol / maxtype;

	$1 = ""

	printf " %-44s: ",$0;
	
	for(j = 0; j < max; j++)
	{
		printf "#";
	}
	printf "\n";
}'


exit 0
